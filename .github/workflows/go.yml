# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        go get .

        pip3 install "sqlglot[rs]"

        curl -LJO https://github.com/duckdb/duckdb/releases/download/v1.1.3/duckdb_cli-linux-amd64.zip
        unzip duckdb_cli-linux-amd64.zip
        chmod +x duckdb
        sudo mv duckdb /usr/local/bin
        duckdb -c 'INSTALL json from core'
        duckdb -c 'SELECT extension_name, loaded, install_path FROM duckdb_extensions() where installed'

    - name: Build
      run: go build -v
    
    - name: Test packages
      run: |
        go test -v -cover ./charset ./transpiler ./backend ./harness ./pgserver ./catalog ./flightsqltest | tee packages.log
        cat packages.log | grep -e "^--- " | sed 's/--- //g' | awk 'BEGIN {count=1} {printf "%d. %s\n", count++, $0}'
        cat packages.log | grep -q "FAIL" && exit 1 || exit 0

    - name: Test Query Engine
      run: |
        go test -v -cover --timeout 600s . | tee query.log
        cat query.log | grep -e "^--- " | sed 's/--- //g' | awk 'BEGIN {count=1} {printf "%d. %s\n", count++, $0}'
        cat query.log | grep -q "FAIL" && exit 1 || exit 0
